// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.12.4
// source: gateway/gateway.proto

package gateway

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGatewayFriendList = "/api.gateway.Gateway/FriendList"
const OperationGatewayFriendPutIn = "/api.gateway.Gateway/FriendPutIn"
const OperationGatewayFriendPutInHandle = "/api.gateway.Gateway/FriendPutInHandle"
const OperationGatewayFriendPutInList = "/api.gateway.Gateway/FriendPutInList"
const OperationGatewayGroupCreate = "/api.gateway.Gateway/GroupCreate"
const OperationGatewayGroupPutin = "/api.gateway.Gateway/GroupPutin"

type GatewayHTTPServer interface {
	// FriendList 好友列表
	FriendList(context.Context, *FriendListReq) (*FriendListResp, error)
	// FriendPutIn 好友申请
	FriendPutIn(context.Context, *FriendPutInReq) (*FriendPutInResp, error)
	// FriendPutInHandle 好友申请处理
	FriendPutInHandle(context.Context, *FriendPutInHandleReq) (*FriendPutInHandleResp, error)
	// FriendPutInList 好友申请列表
	FriendPutInList(context.Context, *FriendPutInListReq) (*FriendPutInListResp, error)
	// GroupCreate 创建群
	GroupCreate(context.Context, *GroupCreateReq) (*GroupCreateResp, error)
	// GroupPutin 申请入群
	GroupPutin(context.Context, *GroupPutinReq) (*GroupPutinResp, error)
}

func RegisterGatewayHTTPServer(s *http.Server, srv GatewayHTTPServer) {
	r := s.Route("/")
	r.POST("/group/create", _Gateway_GroupCreate0_HTTP_Handler(srv))
	r.PUT("/group/putin", _Gateway_GroupPutin0_HTTP_Handler(srv))
	r.PUT("/friend/putin", _Gateway_FriendPutIn0_HTTP_Handler(srv))
	r.PUT("/friend/putin/handle", _Gateway_FriendPutInHandle0_HTTP_Handler(srv))
	r.GET("/friend/putin/list", _Gateway_FriendPutInList0_HTTP_Handler(srv))
	r.GET("/friend/list", _Gateway_FriendList0_HTTP_Handler(srv))
}

func _Gateway_GroupCreate0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GroupCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGroupCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GroupCreate(ctx, req.(*GroupCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GroupCreateResp)
		return ctx.Result(200, reply)
	}
}

func _Gateway_GroupPutin0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GroupPutinReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGroupPutin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GroupPutin(ctx, req.(*GroupPutinReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GroupPutinResp)
		return ctx.Result(200, reply)
	}
}

func _Gateway_FriendPutIn0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FriendPutInReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayFriendPutIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FriendPutIn(ctx, req.(*FriendPutInReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FriendPutInResp)
		return ctx.Result(200, reply)
	}
}

func _Gateway_FriendPutInHandle0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FriendPutInHandleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayFriendPutInHandle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FriendPutInHandle(ctx, req.(*FriendPutInHandleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FriendPutInHandleResp)
		return ctx.Result(200, reply)
	}
}

func _Gateway_FriendPutInList0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FriendPutInListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayFriendPutInList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FriendPutInList(ctx, req.(*FriendPutInListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FriendPutInListResp)
		return ctx.Result(200, reply)
	}
}

func _Gateway_FriendList0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FriendListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayFriendList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FriendList(ctx, req.(*FriendListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FriendListResp)
		return ctx.Result(200, reply)
	}
}

type GatewayHTTPClient interface {
	FriendList(ctx context.Context, req *FriendListReq, opts ...http.CallOption) (rsp *FriendListResp, err error)
	FriendPutIn(ctx context.Context, req *FriendPutInReq, opts ...http.CallOption) (rsp *FriendPutInResp, err error)
	FriendPutInHandle(ctx context.Context, req *FriendPutInHandleReq, opts ...http.CallOption) (rsp *FriendPutInHandleResp, err error)
	FriendPutInList(ctx context.Context, req *FriendPutInListReq, opts ...http.CallOption) (rsp *FriendPutInListResp, err error)
	GroupCreate(ctx context.Context, req *GroupCreateReq, opts ...http.CallOption) (rsp *GroupCreateResp, err error)
	GroupPutin(ctx context.Context, req *GroupPutinReq, opts ...http.CallOption) (rsp *GroupPutinResp, err error)
}

type GatewayHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayHTTPClient(client *http.Client) GatewayHTTPClient {
	return &GatewayHTTPClientImpl{client}
}

func (c *GatewayHTTPClientImpl) FriendList(ctx context.Context, in *FriendListReq, opts ...http.CallOption) (*FriendListResp, error) {
	var out FriendListResp
	pattern := "/friend/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayFriendList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) FriendPutIn(ctx context.Context, in *FriendPutInReq, opts ...http.CallOption) (*FriendPutInResp, error) {
	var out FriendPutInResp
	pattern := "/friend/putin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayFriendPutIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) FriendPutInHandle(ctx context.Context, in *FriendPutInHandleReq, opts ...http.CallOption) (*FriendPutInHandleResp, error) {
	var out FriendPutInHandleResp
	pattern := "/friend/putin/handle"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayFriendPutInHandle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) FriendPutInList(ctx context.Context, in *FriendPutInListReq, opts ...http.CallOption) (*FriendPutInListResp, error) {
	var out FriendPutInListResp
	pattern := "/friend/putin/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayFriendPutInList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...http.CallOption) (*GroupCreateResp, error) {
	var out GroupCreateResp
	pattern := "/group/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayGroupCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) GroupPutin(ctx context.Context, in *GroupPutinReq, opts ...http.CallOption) (*GroupPutinResp, error) {
	var out GroupPutinResp
	pattern := "/group/putin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayGroupPutin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
