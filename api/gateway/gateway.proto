syntax = "proto3";

package api.gateway;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "kratos-im/api/gateway;gateway";
option java_multiple_files = true;
option java_package = "api.gateway";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "kratos-im.api.gateway";
    version : "1.0";
  };
  schemes : HTTP;
  schemes : HTTPS;
  security_definitions : {
    security : {
      key: "TokenAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "用户认证,格式为: Bearer+空格+token";
      }
    };
  };
};

service Gateway {
  // 创建群
  rpc GroupCreate(GroupCreateReq) returns (GroupCreateResp) {
    option (google.api.http) = {
      post: "/group/create"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "创建群"
      tags: ["social"]
    };
  }

  // 入群申请
  rpc GroupPutin(GroupPutinReq) returns (GroupPutinResp) {
    option (google.api.http) = {
      put: "/group/putin"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "入群申请"
      tags: ["social"]
    };
  }

  // 入群申请列表
  rpc GroupPutinList(GroupPutinListReq) returns (GroupPutinListResp) {
    option (google.api.http) = {
      get: "/group/putin/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "入群申请列表"
      tags: ["social"]
    };
  }

  // 入群申请处理
  rpc GroupPutInHandle(GroupPutInHandleReq) returns (GroupPutInHandleResp) {
    option (google.api.http) = {
      put: "/group/putin/handle"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "入群申请处理"
      tags: ["social"]
    };
  }

  // 群列表
  rpc GroupList(GroupListReq) returns (GroupListResp) {
    option (google.api.http) = {
      get: "/group/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "群列表"
      tags: ["social"]
    };
  }

  // 群成员列表
  rpc GroupUsers(GroupUsersReq) returns (GroupUsersResp) {
    option (google.api.http) = {
      get: "/group/users"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "群成员列表"
      tags: ["social"]
    };
  }

  // 好友申请
  rpc FriendPutIn(FriendPutInReq) returns(FriendPutInResp) {
    option (google.api.http) = {
      put: "/friend/putin"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "好友申请"
      tags: ["social"]
    };
  }

  // 好友申请处理
  rpc FriendPutInHandle(FriendPutInHandleReq) returns(FriendPutInHandleResp) {
    option (google.api.http) = {
      put: "/friend/putin/handle"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "好友申请处理"
      tags: ["social"]
    };
  }

  // 好友申请列表
  rpc FriendPutInList(FriendPutInListReq) returns(FriendPutInListResp) {
    option (google.api.http) = {
      get: "/friend/putin/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "好友申请列表"
      tags: ["social"]
    };
  }

  // 好友列表
  rpc FriendList(FriendListReq) returns (FriendListResp) {
    option (google.api.http) = {
      get: "/friend/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "好友列表"
      tags: ["social"]
    };
  }

  // 在线好友情况
  rpc FriendsOnline(FriendsOnlineReq) returns (FriendsOnlineResp) {
    option (google.api.http) = {
      get: "/friend/online"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "在线好友情况"
      tags: ["social"]
    };
  }

  // 在线群成员情况
  rpc GroupMembersOnline(GroupMembersOnlineReq) returns (GroupMembersOnlineResp) {
    option (google.api.http) = {
      get: "/group/online"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "在线群成员情况"
      tags: ["social"]
    };
  }

  // 建立会话
  rpc SetUpUserConversation(SetUpUserConversationReq) returns(SetUpUserConversationResp) {
    option (google.api.http) = {
      post: "/conversation/setup"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "建立会话"
      tags: ["im"]
    };
  }

  // 获取会话列表
  rpc GetConversations(GetConversationsReq) returns(GetConversationsResp) {
    option (google.api.http) = {
      get: "/conversation/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取会话"
      tags: ["im"]
    };
  }

  // 更新会话
  rpc PutConversations(PutConversationsReq)  returns(PutConversationsResp) {
    option (google.api.http) = {
      put: "/conversation/update"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新会话"
      tags: ["im"]
    };
  }

  // 获取聊天记录
  rpc GetChatLog(GetChatLogReq) returns(GetChatLogResp) {
    option (google.api.http) = {
      get: "/chat-log/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取聊天记录"
      tags: ["im"]
    };
  }

    // 获取消息已读记录
  rpc GetReadChatRecords(GetReadChatRecordsReq) returns(GetReadChatRecordsResp) {
    option (google.api.http) = {
      get: "/read-chat-records/list"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取消息已读记录"
      tags: ["im"]
    };
  }

  // 用户登录
  rpc UserLogin(UserLoginReq) returns(UserLoginResp) {
    option (google.api.http) = {
      post: "/user/login"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户登录"
      tags: ["user"]
    };
  }
}

message ChatLog {
  string id = 1;
  string conversationId = 2;
  string sendId = 3;
  string recvId = 4;
  int32 msgType = 5;
  string msgContent = 6;
  int32 chatType = 7;
  int64 sendTime = 8;
}

message Conversation {
  string conversationId = 1;
  int32  chatType = 2;
  string targetId = 3;
  bool   isShow = 4;
  int64  seq = 5;
  int32  read = 6;
  int32  total = 7;
  int32  unread = 8;
  string nickname = 9;
  string avatar = 10;
}

message GetChatLogReq {
  string conversationId = 1;
  int64  startSendTime = 2;
  int64  endSendTime = 3;
  int64  count = 4;
}

message GetChatLogResp {
  repeated ChatLog list = 1;
}

message PutConversationsReq {
  map<string,Conversation> conversations = 1;
}

message PutConversationsResp {}

message GetConversationsReq {}

message GetConversationsResp {
  string user_id = 1;
  map<string,Conversation> conversations = 2;
}

message SetUpUserConversationReq {
  string recvId = 1;
  int32  chatType = 2;
}

message SetUpUserConversationResp {}

message GroupMembersOnlineReq {
  uint64 group_id = 1;
}

message GroupMembersOnlineResp {
  map<string,bool> online_list = 1;
}

message FriendsOnlineReq {}

message FriendsOnlineResp {
  map<string,bool> online_list = 1;
}

message UserLoginReq {
  string code = 1;
}
message UserLoginResp {
  message UserInfo {
    string token = 1;
    string user_id = 2;
    string avatar = 4;
    string nickname = 7;
  }

  UserInfo user_info = 1;
  string token = 2;
}

// model
message Friends {
  int32  id = 1;
  string friendUid = 2;
  string nickname = 3;
  string avatar = 4;
  string remark = 5;
}

message FriendRequests {
  int32  id = 1;
  string userId = 2;
  string reqUid = 3;
  string reqMsg = 4;
  int64  reqTime = 5;
  int32  handleResult = 6; // 处理结果
  string handleMsg = 7;
}

message Groups {
  uint64 id = 1;
  string name = 2;
  string icon = 3;
  int32  status = 4;
  string creator_uid = 5;
  int32  groupType = 6;
  bool   isVerify = 7;
  string notification = 8; // 公告通知
  string notificationUid = 9;
}

message GroupMembers {
  int32  id = 1;
  uint64 groupId = 2;
  string userId = 3;
  int32  roleLevel = 6;
  int64  joinTime = 7;
  int32  joinSource = 8;
  string inviterUid = 9;
  string operatorUid = 10;
  string nickname = 11;
  string userAvatarUrl = 12;
}

message GroupRequests {
  int32  id = 1;
  uint64 groupId = 2;
  string reqId = 3;
  string reqMsg = 4;
  int64  reqTime = 5;
  int32  joinSource = 6;
  string inviterUid = 7;
  string handleUid = 8;
  int32  handleResult = 9; // 处理结果
  int64  handleTime = 10;
}

// req resp

message FriendPutInReq {
  string reqUid = 1;
  string reqMsg = 2;
}
message FriendPutInResp {}

message FriendPutInHandleReq {
  int32  friendReqId = 1;
  int32 handleResult = 2; // 处理结果
}
message FriendPutInHandleResp {}

message FriendPutInListReq{
}

message FriendPutInListResp{
  repeated FriendRequests list = 1;
}

message FriendListReq{
}

message FriendListResp{
  repeated Friends list = 1;
}

// 群

message GroupCreateReq {
  string name = 1;
  string icon = 2;
}

message GroupCreateResp {
  uint64 id = 1;
}

message GroupPutinReq {
  uint64 groupId = 1;
  string reqMsg = 2;
  int32 joinSource = 3;
}
message GroupPutinResp {
  uint64 groupId = 1;
}

message GroupPutinListReq {
  uint64 groupId = 1;
}
message GroupPutinListResp {
  repeated GroupRequests list = 1;
}

message GroupPutInHandleReq {
  int32  groupReqId = 1;
  uint64 groupId = 2;
  int32  handleResult = 3; // 处理结果
}
message GroupPutInHandleResp {
}

message GroupListReq{
}
message GroupListResp{
  repeated Groups list = 1;
}

message GroupUsersReq {
  uint64 groupId = 1;
}
message GroupUsersResp {
  repeated GroupMembers List = 1;
}

message GetReadChatRecordsReq {
  string msg_id = 1;
}

message GetReadChatRecordsResp {
  repeated string reads = 1;
  repeated string un_reads = 2;
}